---
layout: post
title: "Http에 대해서"
description: ""
author: chans
image: ""
date: 2017-08-23 20:30:00 +0900
tags: [study, wilt]
comments: true
published: false
---

## What is HTTP
HTTP(Hypertext Transfer Protocol)는 HTML과 같은 리소스들을 가져올 수 있게 해주는 클라이언트-서버 프로토콜이다. 
애플리케이션 -> 계층 프로토콜, 웹 브라우저와 웹 서버 사이의 통신을 위해 디자인되었지만 다른 목적으로도 사용 가능하다(예를 들어???) 

프로토콜 연결을 열고, 요청을 일으키고, 응답받을때까지 대기하는 '클라이언트-서버 모델'을 따르며, 모든 계층에 속하는것으로 알려져 있으나 주로 TCP/IP 계층이 메인입니다.

## 개요
하나의 인터넷 페이지(문서)는 HTTP에 의해서 각종 리소스들이 fetch된 결과물을 보여주는 것이라고 생각하면 될듯하다.  

- 클라이언트에 의해 전송되는 메시지를 Request, 서버에서 응답으로 전송되는 메시지를 Response라고 한다.
- 신뢰가능한 프로토콜이라면 무엇이든 전송 가능함. 하지만 주로 TCP 또는 암호화된 TLS통신을 주로 한다고 한다. 
- 온디맨드 형식으로 페이지 상에서 정보를 갱신하기 위해서도 사용됨 (SPA?) 즉, refresh없이 정보를 가져올 수 있음.
- 요청(request)는 사용자 에이전트(브라우저, 크롤링 로봇 등등) 또는 프록시에 의해 전송됨.

## HTTP 진화
출처: [MDN HTTP의 진화](https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP)
### HTTP 0.9: 원-라인 프로토콜
Tim Berners-Lee에 의해 발명. 간단한 문서를 주고 받기위한 프로토콜로, TCP/IP 상에서 만들어졌다.   

 - 요청이 단일 라인으로 구성되었으며 메서드는 GET이 유일함.
 - 응답도 파일 자체를 응답으로 보내줌.
 - 에러가 있을경우 에러 자체를 보내줌. 사용자가 읽고, 수정을 해야함.
 
### HTTP 1.0: 레전드의 탄생? 
HTTP의 확장성을 만들기 매우 유용해졌다.

 - 전 버전이 너무 빡빡했기때문에 이번에는 좀 더 유연고 확장성을 갖게됨.
 - 상태코드 라인이 날아옴. 요청이 에러가 났는지, 성공했는지 알수 있게되었고 그 결과에 대한 '동작'을 실행할 수 있게됨.
 - HTTP헤더 개념이 요청과 응답에 도입되어 프로토콜이 극도로 유연하고 확장가능해짐.
 - HTTP헤더: `Content-Type`덕분에 문서뿐만아니라 다양한 파일을 전송하는게 가능해짐.
 
### HTTP 1.1: 표준 프로토콜. 
HTTP1.0에서 모호한 부분이 많아 표준화 작업이 진행되었으며 개선사항이 생기게 되었다. 이해한다기보다는 아 이런게 있구나~ 정도로 생각하면 되겠다. 출저는 위에 적혀있음.

 - 커넥션이 재사용될 수 있게 하여, 탐색된 단일 원본 문서 내로 임베드된 리소스들을 디스플레이하기 위해 사용된 커넥션을 다시 열어 시간을 절약하게 하였습니다.
 - 파이프라이닝을 추가하여, 첫번째 요청에 대한 응답이 완전히 전송되기 이전에 두번째 요청 전송을 가능케 하여, 커뮤니케이션 레이턴시를 낮췄습니다.
 - 청크된 응답 또한 지원됩니다.
 - 추가적인 캐시 제어 메커니즘이 도입되었습니다.
 - 언어, 인코딩 혹은 타입을 포함한 컨텐츠 협상이 도입되어, 클라이언트와 서버로 하여금 교환하려는 가장 적합한 컨텐츠에 대한 동의를 가능케 했습니다.
 - Host 헤더 덕분에, 동일 IP 주소에 다른 도메인을 호스트하는 기능이 서버 코로케이션을 가능케 합니다.
 
### 15년간의 업그레이드(확장)
HTTP의 뛰어난 확장성 덕분에 꾸준히 기능이 개선되어 왔으며, 15년이 넘도록 극도의 안전성을 보여줬다. 대표적인 기능은 다음과 같다.

 - 보안전송을 위한 HTTP (HTTPS)  
   SSL이 본격적으로 도입되면서 클라이언트와 서버간 통신의 보안성을 강화시켰다. SSL -> TLS??  (참고: [SSL이란 무엇인가?](https://wiki.kldp.org/HOWTO/html/SSL-Certificates-HOWTO/x70.html))
   흠.. 요즘 보안을 강화시키기 위한 HTTP'S'의 도입이 거의 필수조건이 되었고, 구글 크롬 같은경우 이 'S'가 없을 경우 위험한 사이트로 판단해서 사용자의 접근을 아예 막아버린다. 또한 일부 은행 피싱 사이트 같은경우 주소가 https로 시작되지 않는 사이트가 많은데 이게 클라이언트가 전송한 값을 중간에 가로챌 수 있기 때문에 범죄(해킹?)에 사용되는것 같다. 결구 어떤 서비스를 런칭하려면 https는 필수라는.
   
 - 복잡한 애플리케이션을 위한 HTTP  
   .DAV라는 특정 확장자를 갖고있는 애플리케이션이 생김. 그러나 웹 영역에서 이 확장자를 사용하는 금기라고 한다.(복잡한 서버환경이 필요하기때문에)  
   REST(Representational State Transfer) API를 사용하게 되었다. .DAV와는 다르게 클라이언트와 서버가 상호작용이 가능하고, 애플리케이션이 서버나 브라우저 갱신없이 데이터를 검색하고 수정하는게 가능함. 2010년부터 RESTful API가 일반적이게 사용됨. 아니, 최근들어서는 RESTful API를 거의 필수적으로 사용하고 있으며 많은 회사들이 이를 필수 조건으로 두고 인사관리를 하고 있는것으로 알고있다. 실제로 프론트개발을 하면서 가장많이 사용하게 되는게 서버와 통신하는 AJAX인데 요친구가 저친구라고 생각하면 될듯. 
   
 - 웹의 보안모델 완화  
   이부분은 MDN문서를 아무리 들여다 봐도 잘 이해가 안되는것 같다. 경험상 CORS가 굉장히 까다롭게 느껴졌는데 오히려 '보안모델 완화' 라고 적혀 있고 설명도 '확실한 제약사항 아래에서 관대해지는것이 효율적이다'라는 이상한 말이 적혀있다.  
   결론적으로는 HTTP에는 수많은 헤더들이 있으며, CORS(Cross-Origin Resource Sharing 크로스 오리진 리소스 공유)와 CSP(컨텐츠 보안 정책 Contents Security Policy)와 깊은 연관이 있다는것 정도로 이해할 수 있겠다. CORS가 까다롭게 느껴졌던건 웹 개발당시 몇몇 CDN이 https환경이 아니라면 콘솔창에 에러를 띄워준다. 사용은 가능하지만 '위험'하다는 정도?

### HTTP 2: 더 나은 성능을 위한 프로토콜
HTTP1.1과 차이점 리스트

- HTTP2는 텍스트 프로토콜이라기 보다는 이진(Binary) 프로토콜입니다. 더 이상 읽을 수도 없고 수작업을 만들어낼 수 없습니다; 이런 결점에 대한 보상으로, 새로운 최적화 기술이 구현될 수 있습니다.
- 병렬 요청이 동일한 커넥션 상에서 다루어질 수 있는 다중화 프로토콜로, 순서를 제거해주고 HTTP/1.x 프로토콜의 제약사항을 막아줍니다.
- 전송된 데이터의 분명한 중복과 그런 데이터로부터 유발된 불필요한 오버헤드를 제거하면서, 연속된 요청 사이의 매우 유사한 내용으로 존재하는 헤더들을 압축시킵니다.
- 서버로 하여금 사전에 클라이언트 캐시를 서버 푸쉬라고 불리는 메커니즘에 의해, 필요하게 될 데이터로 채워넣도록 허용합니다.

HTTP2는 2015년에 릴리즈 되었지만 이미 일반적으로 사용하게 되는 프로토콜이 되었다. 그 이유는 별다른 노력없이 1.1에서 2버전으로 바꿀 수 있기때문? 이라고 한다. 최신 브라우저와 최신 서버만 있으면 HTTP2를 사용하는데 전혀 문제될게 없었고, 컴퓨터 하드웨어, 인터넷 통신등이 비약적으로 발전되어있는 상태이기 때문에 급속도로 업계를 잠식할 수 있었다고 한다. 

### HTTP 2, 진화
HTTP1.x 가 그랬던것처럼, HTTP2도 계속 발전해나가고 있다. 

- Alt-Svc 지원은 좀 더 영리한 CDN 메커니즘을 따라, 신분 증명의 개념과 주어진 자원의 위치를 분리하도록 해줍니다.
- Client-Hints의 도입으로 브라우저 혹은 클라이언트가 요구사항이나 서버의 하드웨어 제약사항에 관한 정보를 사전에 미리 주고 받을 수 있게 되었습니다.
- Cookie 내에 보안 관련 접두사 도입은 보안 쿠키가 변경되지 않았다는 것을 보장하는데 도움을 줍니다.

위의 기능들이 2016년에 추가되었다고 한다. 솔직히 위의 3개가 뭔지는 잘 모르겠다. 실무에서 경험해본적이 없어서 그런가... 3번같은경우는 쿠키 관련된것 같은데 실제로 도움이 많이 될만한 기능으로 생각된다.

### 결론
HTTP의 역사를 알아보았다. 90년대 팀 버너스리 형님이 만들어놓은 것을 토대로 지속적으로 확장에 확장을 거듭하며 아직까지도 널리 사용되고 있는것을 보면 저 형이 얼마나 무서운 사람인지 알 수 있을 것 같다. www의 아버지라고 불리는 사람이니 엄청 대단한 사람이지만 '미래에는 이렇게 사용되면 좋겠지'라고 생각한걸 만들고, 실제로 몇 십년 뒤에도 사용되도록 할 정도면 정말 장난 없는것 같다. 

## HTTP CORS 
내가 제일 궁금해하는 것중 하나. CORS와 보안 관련해서는 꼭 짚고 넘어가고 싶었다.  
ㄴㅇㄹ



## 알아볼것
1. protocol
2. 네트워크 계층
3. TCP/IP
4. proxy
5. TLS
 


[참고: 모질라재단 MDN](https://developer.mozilla.org/ko/docs/Web/HTTP/Overview)
[]()



